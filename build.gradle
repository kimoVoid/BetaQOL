plugins {
	id 'java'
	id 'maven-publish'
	id 'fabric-loom' version '1.6-SNAPSHOT' apply false
	id 'ploceus' version '1.6-SNAPSHOT' apply false
}

def configure(project) {
	project.apply plugin: 'java'
	project.apply plugin: 'maven-publish'
	project.apply plugin: 'fabric-loom'
	project.apply plugin: 'ploceus'

	project.base {
		archivesName = "${project.rootProject.archives_base_name}-${project.environment}"
	}
	project.version = "${project.rootProject.version}+${project.rootProject.minecraft_version}"
	project.maven_group = project.rootProject.maven_group

	project.loom {
		if (project.environment == 'client') {
			clientOnlyMinecraftJar()
		}
		if (project.environment == 'server') {
			serverOnlyMinecraftJar()
		}
	}

	project.ploceus {
		if (project.environment == 'client') {
			clientOnlyMappings()
		}
		if (project.environment == 'server') {
			serverOnlyMappings()
		}
	}

	project.repositories {
		jcenter()
		maven {
			name = "Jitpack"
			url = "https://jitpack.io/"
			content {
				includeGroup("com.github.GeyserMC")
			}
		}
		maven {
			url "https://libraries.minecraft.net/"
		}
		mavenCentral()
	}

    project.loom {
        runs {
            client {
                vmArgs "-Dsun.java2d.uiScale=1"
            }
        }
    }

	project.dependencies {
		minecraft "com.mojang:minecraft:${project.rootProject.minecraft_version}"
		/*
		mappings project.loom.layered {
			mappings "net.ornithemc:feather:${project.rootProject.minecraft_version}-${project.environment}+build.${project.feather_build}:v2"
			addLayer project.ploceus.nestedMappings() // remove this line if not using nests
		}
		nests "net.ornithemc:nests:${project.rootProject.minecraft_version}-${project.environment}+build.${project.nests_build}" // remove this line if not
		 */

		mappings project.ploceus.featherMappings(project.feather_build)
		nests project.ploceus.nests(project.nests_build) // remove this line if not using nests

		implementation 'org.slf4j:slf4j-api:1.7.25'

		modImplementation "net.fabricmc:fabric-loader:${project.rootProject.loader_version}"
		include(implementation("com.github.GeyserMC:MCAuthLib:d9d773e5d50327c33898c65cd545a4f6ef3ba1b5"))
		modImplementation "com.terraformersmc:modmenu:0.2.1+mcb1.7.3"

		modImplementation files('libs/thorough-keybindings-1.2.0+b1.4-b1.7.jar')

		project.ploceus.addCommonLibraries();
		project.ploceus.dependOsl(project.osl_version, 'client')
		project.ploceus.dependOslModule('core', '0.6.0', 'client')
	}

	project.sourceSets {
		main {
			java {
				srcDirs += project.rootProject.sourceSets.main.java.srcDirs
			}
			resources {
				srcDirs += project.rootProject.sourceSets.main.resources.srcDirs
			}
		}
	}

	project.processResources {
		filesMatching('fabric.mod.json') {
			expand project.properties
		}
	}

	project.tasks.withType(JavaCompile).configureEach {
		it.options.compilerArgs.add("-XDignore.symbol.file=true")
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}

	project.java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
		// Uncomment this line to generate them.
		// withJavadocJar()
	}

	// If you plan to use a different file for the license, don't forget to change the file name here!
	project.jar {
		from('LICENSE') {
			rename { "${it}_${project.base.archivesName.get()}" }
		}
	}

	// Configure the maven publication
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				from project.components.java
			}
		}

		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		repositories {
			// Add repositories to publish to here.
			// Notice: This block does NOT have the same function as the block in the top level.
			// The repositories here will be used for publishing your artifact, not for
			// retrieving dependencies.
		}
	}
}
